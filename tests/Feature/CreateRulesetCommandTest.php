<?php declare(strict_types=1);

test('creates ruleset with default template and provided name', function () {
    $this->artisan('create:ruleset', [
        'name' => 'test-default',
        '--template' => 'default',
        '--output-dir' => 'tests/Fixtures',
        '--no-interaction',
    ])
        ->assertExitCode(0)
        ->expectsOutputToContain('Creating OpenAPI Validation Ruleset')
        ->expectsOutputToContain('✅ Ruleset created successfully: tests/Fixtures/test-default.yaml');

    // Verify file was created
    expect(file_exists('tests/Fixtures/test-default.yaml'))->toBeTrue();

    // Verify file contents
    $content = file_get_contents('tests/Fixtures/test-default.yaml');
    expect($content)
        ->toContain('# OpenAPI Validation Ruleset')
        ->toContain('# Generated by Spectrum on')
        ->toContain('# Balanced validation with common best practices')
        ->toContain('name: \'Default Validation Ruleset\'')
        ->toContain('required-fields:')
        ->toContain('enabled: true')
        ->toContain('severity: error');

    // Clean up
    unlink('tests/Fixtures/test-default.yaml');
});

test('creates ruleset with strict template', function () {
    $this->artisan('create:ruleset', [
        'name' => 'test-strict',
        '--template' => 'strict',
        '--output-dir' => 'tests/Fixtures',
        '--no-interaction',
    ])
        ->assertExitCode(0)
        ->expectsOutputToContain('✅ Ruleset created successfully: tests/Fixtures/test-strict.yaml');

    // Verify file was created with strict rules
    $content = file_get_contents('tests/Fixtures/test-strict.yaml');
    expect($content)
        ->toContain('name: \'Strict Validation Ruleset\'')
        ->toContain('# Comprehensive validation with strict requirements')
        ->toContain('path-parameters:')
        ->toContain('severity: error') // Should have errors for path-parameters in strict mode
        ->toContain('valid-security-references:');

    // Clean up
    unlink('tests/Fixtures/test-strict.yaml');
});

test('creates ruleset with permissive template', function () {
    $this->artisan('create:ruleset', [
        'name' => 'test-permissive',
        '--template' => 'permissive',
        '--output-dir' => 'tests/Fixtures',
        '--no-interaction',
    ])
        ->assertExitCode(0)
        ->expectsOutputToContain('✅ Ruleset created successfully: tests/Fixtures/test-permissive.yaml');

    // Verify file was created with permissive rules
    $content = file_get_contents('tests/Fixtures/test-permissive.yaml');
    expect($content)
        ->toContain('name: \'Permissive Validation Ruleset\'')
        ->toContain('# Minimal validation focusing only on critical issues')
        ->toContain('path-parameters:')
        ->toContain('enabled: false'); // Should have disabled rules in permissive mode

    // Clean up
    unlink('tests/Fixtures/test-permissive.yaml');
});

test('creates directory if it does not exist', function () {
    $testDir = 'tests/Fixtures/new-dir';

    // Ensure directory doesn't exist
    if (is_dir($testDir)) {
        rmdir($testDir);
    }

    $this->artisan('create:ruleset', [
        'name' => 'test-dir-creation',
        '--template' => 'default',
        '--output-dir' => $testDir,
        '--no-interaction',
    ])
        ->assertExitCode(0)
        ->expectsOutputToContain('✅ Ruleset created successfully');

    // Verify directory and file were created
    expect(is_dir($testDir))->toBeTrue();
    expect(file_exists("{$testDir}/test-dir-creation.yaml"))->toBeTrue();

    // Clean up
    unlink("{$testDir}/test-dir-creation.yaml");
    rmdir($testDir);
});

test('uses default name when none provided', function () {
    $this->artisan('create:ruleset', [
        '--template' => 'default',
        '--output-dir' => 'tests/Fixtures',
        '--no-interaction',
    ])
        ->assertExitCode(0)
        ->expectsOutputToContain('✅ Ruleset created successfully: tests/Fixtures/my-ruleset.yaml');

    // Verify default file was created
    expect(file_exists('tests/Fixtures/my-ruleset.yaml'))->toBeTrue();

    // Clean up
    unlink('tests/Fixtures/my-ruleset.yaml');
});

test('validates filename and rejects invalid characters', function () {
    // This test is tricky because we're using prompts, but we can test the validation method indirectly
    // by creating a command instance and testing the validation method
    $command = new App\Commands\CreateRulesetCommand;
    $reflection = new ReflectionClass($command);
    $method = $reflection->getMethod('isValidFilename');
    $method->setAccessible(true);

    // Test valid filenames
    expect($method->invoke($command, 'valid-filename'))->toBeTrue();
    expect($method->invoke($command, 'valid_filename'))->toBeTrue();
    expect($method->invoke($command, 'ValidFilename123'))->toBeTrue();

    // Test invalid filenames
    expect($method->invoke($command, 'invalid filename'))->toBeFalse(); // space
    expect($method->invoke($command, 'invalid/filename'))->toBeFalse(); // slash
    expect($method->invoke($command, 'invalid@filename'))->toBeFalse(); // special char
});

test('generates proper YAML structure', function () {
    $this->artisan('create:ruleset', [
        'name' => 'yaml-test',
        '--template' => 'default',
        '--output-dir' => 'tests/Fixtures',
        '--no-interaction',
    ])
        ->assertExitCode(0);

    $content = file_get_contents('tests/Fixtures/yaml-test.yaml');

    // Parse YAML to ensure it's valid
    $yaml = \Symfony\Component\Yaml\Yaml::parse($content);

    expect($yaml)
        ->toHaveKey('name')
        ->toHaveKey('description')
        ->toHaveKey('rules');

    expect($yaml['rules'])
        ->toHaveKey('required-fields')
        ->toHaveKey('path-parameters')
        ->toHaveKey('response-codes');

    expect($yaml['rules']['required-fields'])
        ->toHaveKey('enabled')
        ->toHaveKey('severity');

    // Clean up
    unlink('tests/Fixtures/yaml-test.yaml');
});

test('shows help text and usage examples', function () {
    $this->artisan('create:ruleset', [
        'name' => 'help-test',
        '--template' => 'default',
        '--output-dir' => 'tests/Fixtures',
        '--no-interaction',
    ])
        ->assertExitCode(0)
        ->expectsOutputToContain('Use it with: spectrum validate <spec> --ruleset=tests/Fixtures/help-test.yaml');

    // Clean up
    unlink('tests/Fixtures/help-test.yaml');
});
